{"ast":null,"code":"var _jsxFileName = \"E:\\\\Protiflio project\\\\amazon-clone\\\\src\\\\ProductDetails\\\\ProductDetails.jsx\",\n  _s = $RefreshSig$();\n// ProductDetails.js\nimport React, { useState, useEffect } from 'react';\nimport ProductInfo from './ProductInfo';\nimport ProductActions from './ProductActions';\nimport SimilarProducts from './SimilarProducts';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [product, setProduct] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [count, setCount] = useState(50); // Example initial stock count\n\n  const api_url = `https://fakestoreapi.com/products/${id}`;\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        const response = await fetch(api_url);\n        if (!response.ok) {\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setProduct(data);\n      } catch (error) {\n        console.error('Fetch error:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProduct();\n  }, [id]);\n  const handleBuyNow = () => {\n    if (count > 0) {\n      setCount(count - 1);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }, this);\n  if (!product) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No product found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 24\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"product-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-details__info\",\n      children: [/*#__PURE__*/_jsxDEV(ProductInfo, {\n        Product: product,\n        count: count,\n        onBuyNow: handleBuyNow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProductActions, {\n        ca: product.category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimilarProducts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductDetails, \"IA4e8FuAxpYBFelTUa6U9xlcly0=\", false, function () {\n  return [useParams];\n});\n_c = ProductDetails;\nexport default ProductDetails;\nvar _c;\n$RefreshReg$(_c, \"ProductDetails\");","map":{"version":3,"names":["React","useState","useEffect","ProductInfo","ProductActions","SimilarProducts","useParams","jsxDEV","_jsxDEV","ProductDetails","_s","id","product","setProduct","loading","setLoading","error","setError","count","setCount","api_url","fetchProduct","response","fetch","ok","Error","status","data","json","console","message","handleBuyNow","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Product","onBuyNow","ca","category","_c","$RefreshReg$"],"sources":["E:/Protiflio project/amazon-clone/src/ProductDetails/ProductDetails.jsx"],"sourcesContent":["// ProductDetails.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport ProductInfo from './ProductInfo';\r\nimport ProductActions from './ProductActions';\r\nimport SimilarProducts from './SimilarProducts';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ProductDetails = () => {\r\n  const { id } = useParams();\r\n  const [product, setProduct] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [count, setCount] = useState(50); // Example initial stock count\r\n\r\n  const api_url = `https://fakestoreapi.com/products/${id}`;\r\n\r\n  useEffect(() => {\r\n    const fetchProduct = async () => {\r\n      try {\r\n        const response = await fetch(api_url);\r\n        if (!response.ok) {\r\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setProduct(data);\r\n      } catch (error) {\r\n        console.error('Fetch error:', error);\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProduct();\r\n  }, [id]);\r\n\r\n  const handleBuyNow = () => {\r\n    if (count > 0) {\r\n      setCount(count - 1);\r\n    }\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n  if (!product) return <div>No product found</div>;\r\n\r\n  return (\r\n    <div className=\"product-details\">\r\n      <div className=\"product-details__info\">\r\n        <ProductInfo\r\n          Product={product}\r\n          count={count}\r\n          onBuyNow={handleBuyNow}\r\n        />\r\n        <ProductActions ca={product.category} />\r\n      </div>\r\n      <SimilarProducts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}