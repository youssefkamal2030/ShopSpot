{"ast":null,"code":"// import React, { createContext, useState, useEffect } from 'react';\n\n// // UserContext for authentication\n// export const UserContext = createContext(null);\n\n// // CartContext for shopping cart\n// export const CartContext = createContext(null);\n\n// // Combined Provider for both contexts\n// export const AppProvider = ({ children }) => {\n//   // State for UserContext\n//   const [user, setUser] = useState(null);\n\n//   // State for CartContext\n//   const [cart, setCart] = useState([]);\n\n//   // Load user data from localStorage on mount\n//   useEffect(() => {\n//     const storedUser = localStorage.getItem('user');\n//     if (storedUser) {\n//       setUser(JSON.parse(storedUser));\n//     }\n//   }, []);\n\n//   // Login function to update user context and store in localStorage\n//   const loginUser = (userData) => {\n//     setUser(userData);\n//     localStorage.setItem('user', JSON.stringify(userData));\n//   };\n\n//   // Logout function to clear user context and localStorage\n//   const logoutUser = () => {\n//     setUser(null);\n//     localStorage.removeItem('user');\n//   };\n\n//   // Add to Cart function\n//   const addToCart = (product, quantity) => {\n//     const existingProduct = cart.find(item => item.product.id === product.id);\n//     if (existingProduct) {\n//       setCart(cart.map(item => item.product.id === product.id ?\n//         { ...item, quantity: item.quantity + quantity } : item));\n//     } else {\n//       setCart([...cart, { product, quantity }]);\n//     }\n//   };\n\n//   // Remove from Cart function\n//   const removeFromCart = (productId) => {\n//     setCart(cart.filter(item => item.product.id !== productId));\n//   };\n\n//   return (\n//     <UserContext.Provider value={{ user, loginUser, logoutUser }}>\n//       <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>\n//         {children}\n//       </CartContext.Provider>\n//     </UserContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["E:/Protiflio project/amazon-clone/src/AppProvider.jsx"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// // UserContext for authentication\r\n// export const UserContext = createContext(null);\r\n\r\n// // CartContext for shopping cart\r\n// export const CartContext = createContext(null);\r\n\r\n// // Combined Provider for both contexts\r\n// export const AppProvider = ({ children }) => {\r\n//   // State for UserContext\r\n//   const [user, setUser] = useState(null);\r\n\r\n//   // State for CartContext\r\n//   const [cart, setCart] = useState([]);\r\n\r\n//   // Load user data from localStorage on mount\r\n//   useEffect(() => {\r\n//     const storedUser = localStorage.getItem('user');\r\n//     if (storedUser) {\r\n//       setUser(JSON.parse(storedUser));\r\n//     }\r\n//   }, []);\r\n\r\n//   // Login function to update user context and store in localStorage\r\n//   const loginUser = (userData) => {\r\n//     setUser(userData);\r\n//     localStorage.setItem('user', JSON.stringify(userData));\r\n//   };\r\n\r\n//   // Logout function to clear user context and localStorage\r\n//   const logoutUser = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem('user');\r\n//   };\r\n\r\n//   // Add to Cart function\r\n//   const addToCart = (product, quantity) => {\r\n//     const existingProduct = cart.find(item => item.product.id === product.id);\r\n//     if (existingProduct) {\r\n//       setCart(cart.map(item => item.product.id === product.id ?\r\n//         { ...item, quantity: item.quantity + quantity } : item));\r\n//     } else {\r\n//       setCart([...cart, { product, quantity }]);\r\n//     }\r\n//   };\r\n\r\n//   // Remove from Cart function\r\n//   const removeFromCart = (productId) => {\r\n//     setCart(cart.filter(item => item.product.id !== productId));\r\n//   };\r\n\r\n//   return (\r\n//     <UserContext.Provider value={{ user, loginUser, logoutUser }}>\r\n//       <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>\r\n//         {children}\r\n//       </CartContext.Provider>\r\n//     </UserContext.Provider>\r\n//   );\r\n// };\r\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}