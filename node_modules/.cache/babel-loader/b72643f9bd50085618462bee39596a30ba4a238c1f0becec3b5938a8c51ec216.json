{"ast":null,"code":"var _jsxFileName = \"E:\\\\Protiflio project\\\\amazon-clone\\\\src\\\\AppProvider.jsx\",\n  _s = $RefreshSig$();\n// AppProvider.js\nimport React, { createContext, useState, useEffect } from 'react';\n\n// UserContext for authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext(null);\n\n// CartContext for shopping cart and stock management\nexport const CartContext = /*#__PURE__*/createContext(null);\n\n// ProductContext for product data\nexport const ProductContext = /*#__PURE__*/createContext(null);\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // State for UserContext\n  const [user, setUser] = useState(null);\n\n  // State for CartContext\n  const [cart, setCart] = useState([]);\n  const [products, setProducts] = useState([]);\n\n  // Load user data from localStorage on mount\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  // Fetch products from API and set state\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(api_url);\n        const data = await response.json();\n        const modifiedData = data.map(product => ({\n          ...product,\n          amount: 50 // or any value you want to initialize with\n        }));\n\n        // Update the state with the modified data\n        setProducts(modifiedData);\n        console.log(modifiedData); // Log the modified data\n      } catch (error) {\n        console.error('Failed to fetch products:', error);\n      }\n    };\n    fetchProducts();\n  }, []);\n\n  // Login function to update user context and store in localStorage\n  const loginUser = userData => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  // Logout function to clear user context and localStorage\n  const logoutUser = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  // Add to Cart function\n  const addToCart = (product, quantity) => {\n    const existingProduct = cart.find(item => item.product.id === product.id);\n    if (existingProduct) {\n      setCart(cart.map(item => item.product.id === product.id ? {\n        ...item,\n        quantity: item.quantity + quantity\n      } : item));\n    } else {\n      setCart([...cart, {\n        product,\n        quantity\n      }]);\n    }\n\n    // Update stock count\n    setProducts(products.map(p => p.id === product.id ? {\n      ...p,\n      stock: p.stock - quantity\n    } : p));\n  };\n\n  // Remove from Cart function\n  const removeFromCart = productId => {\n    const removedProduct = cart.find(item => item.product.id === productId);\n    setCart(cart.filter(item => item.product.id !== productId));\n\n    // Restore stock count\n    setProducts(products.map(p => p.id === productId ? {\n      ...p,\n      stock: p.stock + (removedProduct ? removedProduct.quantity : 0)\n    } : p));\n  };\n\n  // Get stock count for a product\n  const getStockCount = productId => {\n    const product = products.find(p => p.id === productId);\n    return product ? product.stock : 0;\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      logoutUser\n    },\n    children: /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n      value: {\n        products\n      },\n      children: /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n        value: {\n          cart,\n          addToCart,\n          removeFromCart,\n          getStockCount\n        },\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"nmFynKkKghjI8iohv56ZRAm+XeM=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","UserContext","CartContext","ProductContext","AppProvider","children","_s","user","setUser","cart","setCart","products","setProducts","storedUser","localStorage","getItem","JSON","parse","fetchProducts","response","fetch","api_url","data","json","modifiedData","map","product","amount","console","log","error","loginUser","userData","setItem","stringify","logoutUser","removeItem","addToCart","quantity","existingProduct","find","item","id","p","stock","removeFromCart","productId","removedProduct","filter","getStockCount","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Protiflio project/amazon-clone/src/AppProvider.jsx"],"sourcesContent":["// AppProvider.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\n// UserContext for authentication\r\nexport const UserContext = createContext(null);\r\n\r\n// CartContext for shopping cart and stock management\r\nexport const CartContext = createContext(null);\r\n\r\n// ProductContext for product data\r\nexport const ProductContext = createContext(null);\r\n\r\nexport const AppProvider = ({ children }) => {\r\n    // State for UserContext\r\n    const [user, setUser] = useState(null);\r\n\r\n    // State for CartContext\r\n    const [cart, setCart] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n\r\n    // Load user data from localStorage on mount\r\n    useEffect(() => {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n            setUser(JSON.parse(storedUser));\r\n        }\r\n    }, []);\r\n\r\n    // Fetch products from API and set state\r\n    useEffect(() => {\r\n        const fetchProducts = async () => {\r\n            try {\r\n                const response = await fetch(api_url);\r\n                const data = await response.json();\r\n                \r\n                const modifiedData = data.map(product => ({\r\n                    ...product,\r\n                    amount: 50 // or any value you want to initialize with\r\n                }));\r\n\r\n                // Update the state with the modified data\r\n                setProducts(modifiedData);\r\n\r\n                console.log(modifiedData); // Log the modified data\r\n\r\n            } catch (error) {\r\n                console.error('Failed to fetch products:', error);\r\n            }\r\n        };\r\n\r\n        fetchProducts();\r\n    }, []);\r\n\r\n    // Login function to update user context and store in localStorage\r\n    const loginUser = (userData) => {\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n    };\r\n\r\n    // Logout function to clear user context and localStorage\r\n    const logoutUser = () => {\r\n        setUser(null);\r\n        localStorage.removeItem('user');\r\n    };\r\n\r\n    // Add to Cart function\r\n    const addToCart = (product, quantity) => {\r\n        const existingProduct = cart.find(item => item.product.id === product.id);\r\n        if (existingProduct) {\r\n            setCart(cart.map(item => item.product.id === product.id ?\r\n                { ...item, quantity: item.quantity + quantity } : item));\r\n        } else {\r\n            setCart([...cart, { product, quantity }]);\r\n        }\r\n\r\n        // Update stock count\r\n        setProducts(products.map(p => p.id === product.id ?\r\n            { ...p, stock: p.stock - quantity } : p));\r\n    };\r\n\r\n    // Remove from Cart function\r\n    const removeFromCart = (productId) => {\r\n        const removedProduct = cart.find(item => item.product.id === productId);\r\n        setCart(cart.filter(item => item.product.id !== productId));\r\n\r\n        // Restore stock count\r\n        setProducts(products.map(p => p.id === productId ?\r\n            { ...p, stock: p.stock + (removedProduct ? removedProduct.quantity : 0) } : p));\r\n    };\r\n\r\n    // Get stock count for a product\r\n    const getStockCount = (productId) => {\r\n        const product = products.find(p => p.id === productId);\r\n        return product ? product.stock : 0;\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user, loginUser, logoutUser }}>\r\n            <ProductContext.Provider value={{ products }}>\r\n                <CartContext.Provider value={{ cart, addToCart, removeFromCart, getStockCount }}>\r\n                    {children}\r\n                </CartContext.Provider>\r\n            </ProductContext.Provider>\r\n        </UserContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}